name: training

on: push

jobs:
  check_commit:
    runs-on: ubuntu-latest
    outputs:
      match: ${{ steps.commit-message-check.outputs.match }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Check Commit Message
        id: commit-message-check
        run: |
          commit_message=$(git log -1 --pretty=%B)
          echo "Commit message: $commit_message"
          if [[ "$commit_message" == *"!train-hessian!"* ]]; then
            echo "match=true" >> $GITHUB_OUTPUT
            echo "Training requested, proceeding to train the model."
          else
            echo "match=false" >> $GITHUB_OUTPUT
            echo "No training requested, skipping training process."
          fi
  
  train_model:
    needs: check_commit
    if: needs.check_commit.outputs.match == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3  # Ensure the checkout step is here to pull code for training

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_JSON }}

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
    
      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/gcloud_requirements.txt

      # - name: Train the model on Vertex AI
      #   run: |
      #     cd deployment_train
      #     bash start_vertex_training.sh

      - name: Deploy the model to Vertex AI
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            cd /${{ secrets.VPS_USER }}/HESSIAN
            git checkout .
            git pull origin vertex-ai-action
            python -m deployment_train.update_models '{"epoch": 1, "model_size": "small", "path": "weights"}'
            cd deployment
            bash deploy.sh


